unit DOBOTTYPE;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date:  2017/6/22                                            }
{    Generated Time: 10:18:06                                              }
{                                                                          }
{**************************************************************************}

interface
uses
  Windows;
  
type
  POSE = packed record
    x: single;
    y: Single;
    z: Single;
    r: Single;
    jointAngle: Array[0..3] of Single;
  end {tagPose};
 // POSE= tagPose;

{+// }
{-* Kinematics parameters }
{= }
type
  tagKinematics = packed record
    velocity: Single;
    acceleration: Single;
  end {tagKinematics};
  KINEMATICS = tagKinematics;

{+// }
{-* HOME related }
{= }
type
  tagHOMEParams = packed record
    x: Single;
    y: Single;
    z: Single;
    r: Single;
  end {tagHOMEParams};
  HOMEPARAMS =tagHOMEParams;
type
  tagHOMECmd = packed record
    reserved: Word;
  end {tagHOMECmd};
  HOMECMD = tagHOMECmd;
  
{+// }
{-* JOG related }
{= }
type
  tagJOGJointParams = packed record
    velocity: Array[0..4-1] of Single;
    acceleration: Array[0..4-1] of Single;
  end {tagJOGJointParams};
  JOGJOINTPARAMS =tagJOGJointParams;

type
  tagJOGCoordinateParams = packed record
    velocity: Array[0..4-1] of Single;
    acceleration: Array[0..4-1] of Single;
  end {tagJOGCoordinateParams};
  JOGCOORDINATEPARAMS = tagJOGCoordinateParams;

type
  tagJOGCommonParams = packed record
    velocityRatio: Single;
    accelerationRatio: Single;
  end {tagJOGCommonParams};
  JOGCOMMONPARAMS =tagJOGCommonParams;
type
    JOGCmdMode = (
    JogIdle, 
    JogAPPressed, 
    JogANPressed, 
    JogBPPressed, 
    JogBNPressed, 
    JogCPPressed, 
    JogCNPressed, 
    JogDPPressed, 
    JogDNPressed,
    JogEPPressed, 
    JogENPressed  );

type
  tagJOGCmd = packed record
    isJoint: Byte;
    cmd: Byte;
  end {tagJOGCmd};
  JOGCMD = tagJOGCmd;

{+// }
{-* PTP related }
{= }
type
  tagPTPJointParams = packed record
    velocity: Array[0..4-1] of Single;
    acceleration: Array[0..4-1] of Single;
  end {tagPTPJointParams};
  PTPJOINTPARAMS =tagPTPJointParams;
type
  tagPTPCoordinateParams = packed record
    xyzVelocity: Single;
    rVelocity: Single;
    xyzAcceleration: Single;
    rAcceleration: Single;
  end {tagPTPCoordinateParams};
  PTPCOORDINATEPARAMS = tagPTPCoordinateParams;
type
  tagPTPJumpParams = packed record
    jumpHeight: Single;
    zLimit: Single;
  end {tagPTPJumpParams};
  PTPJUMPPARAMS = tagPTPJumpParams;
type
  tagPTPCommonParams = packed record
    velocityRatio: Single;
    accelerationRatio: Single;
  end {tagPTPCommonParams};
  PTPCOMMONPARAMS = tagPTPCommonParams;
type
  PTPMode = (
    PTPJUMPXYZMode, 
    PTPMOVJXYZMode, 
    PTPMOVLXYZMode, 
    PTPJUMPANGLEMode, 
    PTPMOVJANGLEMode, 
    PTPMOVLANGLEMode, 
    PTPMOVJANGLEINCMode, 
    PTPMOVLXYZINCMode, 
    PTPMOVJXYZINCMode, 
    PTPJUMPMOVLXYZMode );


type
  PTPCMD = packed record
    ptpMode: Byte;
    x: single;
    y: single;
    z: single;
    r: single;
  end {tagPTPCmd};
  //PTPCMD = tagPTPCmd;
  pPTPCMD = ^PTPCMD;


type
  tagWAITCmd = packed record
    timeout: Word;
  end {tagWAITCmd};
  WAITCMD = tagWAITCmd;



type
  tagUserParams = packed record
  params: Array[0..8-1] of Single;
  end {tagUserParams};
 USERPARAMS = tagUserParams;
{+//******************************************************************************************************** }
{-** API result }
{=******************************************************************************************************** }
type
  DobotConnectState= (
    DobotConnect_NoError, 
    DobotConnect_NotFound, 
    DobotConnect_Occupied  );

type
  DobotCommunicateState= (
    DobotCommunicate_NoError, 
    DobotCommunicate_BufferFull, 
    DobotCommunicate_Timeout, 
    DobotCommunicate_InvalidParams  );

implementation 

end.
