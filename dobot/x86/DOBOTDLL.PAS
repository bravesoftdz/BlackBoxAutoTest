unit DOBOTDLL;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date:  2017/5/18                                            }
{    Generated Time: 21:39:45                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> d:\dobot\dobotdemov2.0\dobotdemov2.0\dobotdll\precompiled\windows\x86\DOBOTDLL.H <=}

{$IFNDEF DOBOTDLL_H}
{$DEFINE DOBOTDLL_H}

{$INCLUDE "DobotType.h"}

var
  DobotExec: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SearchDobot: function(dobotNameList: PChar; 
                        maxLen: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  ConnectDobot: function(const portName: PChar; 
                         baudrate: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DisconnectDobot: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetCmdTimeout: function(cmdTimeout: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// Device information }
var
  SetDeviceSN: function(const deviceSN: PChar): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetDeviceSN: function(deviceSN: PChar; 
                        maxLen: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetDeviceName: function(const deviceName: PChar): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetDeviceName: function(deviceName: PChar; 
                          maxLen: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  GetDeviceVersion: function(var majorVersion: UINT8_T; 
                             var minorVersion: UINT8_T; 
                             var revision: UINT8_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// Pose and Kinematics parameters are automatically get }
var
  GetPose: function(var pose: POSE): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetPoseEx: function(var pose: POSE): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  ResetPose: function(manual: Bool; 
                      rearArmAngle: Single; 
                      frontArmAngle: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetKinematics: function(var kinematics: KINEMATICS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// Alarms }
var
  GetAlarmsState: function(var alarmsState: UINT8_T; 
                           var len: UINT32_T; 
                           maxLen: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  ClearAllAlarmsState: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// HOME }
var
  SetHOMEParams: function(var homeParams: HOMEPARAMS; 
                          isQueued: Bool; 
                          var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetHOMEParams: function(var homeParams: HOMEPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetHOMECmd: function(var homeCmd: HOMECMD; 
                       isQueued: Bool; 
                       var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// Handheld teach }
var
  SetHHTTrigMode: function(hhtTrigMode: HHTTRIGMODE): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetHHTTrigMode: function(var hhtTrigMode: HHTTRIGMODE): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetHHTTrigOutputEnabled: function(isEnabled: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetHHTTrigOutputEnabled: function(var isEnabled: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  GetHHTTrigOutput: function(var isTriggered: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// EndEffector }
var
  SetEndEffectorParams: function(var endEffectorParams: ENDEFFECTORPARAMS; 
                                 isQueued: Bool; 
                                 var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetEndEffectorParams: function(var endEffectorParams: ENDEFFECTORPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetEndEffectorLaser: function(enableCtrl: Bool; 
                                on: Bool; 
                                isQueued: Bool; 
                                var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetEndEffectorLaser: function(var isCtrlEnabled: Bool; 
                                var isOn: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetEndEffectorSuctionCup: function(enableCtrl: Bool; 
                                     suck: Bool; 
                                     isQueued: Bool; 
                                     var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetEndEffectorSuctionCup: function(var isCtrlEnabled: Bool; 
                                     var isSucked: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetEndEffectorGripper: function(enableCtrl: Bool; 
                                  grip: Bool; 
                                  isQueued: Bool; 
                                  var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetEndEffectorGripper: function(var isCtrlEnabled: Bool; 
                                  var isGripped: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// Arm orientation }
var
  SetArmOrientation: function(armOrientation: ARMORIENTATION; 
                              isQueued: Bool; 
                              var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetArmOrientation: function(var armOrientation: ARMORIENTATION): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// JOG functions }
var
  SetJOGJointParams: function(var jointJogParams: JOGJOINTPARAMS; 
                              isQueued: Bool; 
                              var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetJOGJointParams: function(var jointJogParams: JOGJOINTPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetJOGCoordinateParams: function(var coordinateJogParams: JOGCOORDINATEPARAMS; 
                                   isQueued: Bool; 
                                   var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetJOGCoordinateParams: function(var coordinateJogParams: JOGCOORDINATEPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetJOGCommonParams: function(var jogCommonParams: JOGCOMMONPARAMS; 
                               isQueued: Bool; 
                               var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetJOGCommonParams: function(var jogCommonParams: JOGCOMMONPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetJOGCmd: function(var jogCmd: JOGCMD; 
                      isQueued: Bool; 
                      var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// PTP functions }
var
  SetPTPJointParams: function(var ptpJointParams: PTPJOINTPARAMS; 
                              isQueued: Bool; 
                              var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetPTPJointParams: function(var ptpJointParams: PTPJOINTPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetPTPCoordinateParams: function(var ptpCoordinateParams: PTPCOORDINATEPARAMS; 
                                   isQueued: Bool; 
                                   var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetPTPCoordinateParams: function(var ptpCoordinateParams: PTPCOORDINATEPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetPTPJumpParams: function(var ptpJumpParams: PTPJUMPPARAMS; 
                             isQueued: Bool; 
                             var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetPTPJumpParams: function(var ptpJumpParams: PTPJUMPPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetPTPCommonParams: function(var ptpCommonParams: PTPCOMMONPARAMS; 
                               isQueued: Bool; 
                               var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetPTPCommonParams: function(var ptpCommonParams: PTPCOMMONPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetPTPCmd: function(var ptpCmd: PTPCMD; 
                      isQueued: Bool; 
                      var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// CP functions }
var
  SetCPParams: function(var cpParams: CPPARAMS; 
                        isQueued: Bool; 
                        var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetCPParams: function(var cpParams: CPPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetCPCmd: function(var cpCmd: CPCMD; 
                     isQueued: Bool; 
                     var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetCPLECmd: function(var cpCmd: CPCMD; 
                       isQueued: Bool; 
                       var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// ARC }
var
  SetARCParams: function(var arcParams: ARCPARAMS; 
                         isQueued: Bool; 
                         var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetARCParams: function(var arcParams: ARCPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetARCCmd: function(var arcCmd: ARCCMD; 
                      isQueued: Bool; 
                      var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// WAIT }
var
  SetWAITCmd: function(var waitCmd: WAITCMD; 
                       isQueued: Bool; 
                       var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// TRIG }
var
  SetTRIGCmd: function(var trigCmd: TRIGCMD; 
                       isQueued: Bool; 
                       var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// EIO }
var
  SetIOMultiplexing: function(var ioMultiplexing: IOMULTIPLEXING; 
                              isQueued: Bool; 
                              var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetIOMultiplexing: function(var ioMultiplexing: IOMULTIPLEXING): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetIODO: function(var ioDO: IODO; 
                    isQueued: Bool; 
                    var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetIODO: function(var ioDO: IODO): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetIOPWM: function(var ioPWM: IOPWM; 
                     isQueued: Bool; 
                     var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetIOPWM: function(var ioPWM: IOPWM): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  GetIODI: function(var ioDI: IODI): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetIOADC: function(var ioADC: IOADC): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetEMotor: function(var eMotor: EMOTOR; 
                      isQueued: Bool; 
                      var queuedCmdIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// CAL }
var
  SetAngleSensorStaticError: function(rearArmAngleError: Single; 
                                      frontArmAngleError: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetAngleSensorStaticError: function(var rearArmAngleError: Single; 
                                      var frontArmAngleError: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetAngleSensorCoef: function(rearArmAngleCoef: Single; 
                               frontArmAngleCoef: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetAngleSensorCoef: function(var rearArmAngleCoef: Single; 
                               var frontArmAngleCoef: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  SetBaseDecoderStaticError: function(baseDecoderError: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetBaseDecoderStaticError: function(var baseDecoderError: Single): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// WIFI }
var
  SetWIFIConfigMode: function(enable: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFIConfigMode: function(var isEnabled: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetWIFISSID: function(const ssid: PChar): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFISSID: function(ssid: PChar; 
                        maxLen: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetWIFIPassword: function(const password: PChar): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFIPassword: function(password: PChar; 
                            maxLen: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetWIFIIPAddress: function(var wifiIPAddress: WIFIIPADDRESS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFIIPAddress: function(var wifiIPAddress: WIFIIPADDRESS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetWIFINetmask: function(var wifiNetmask: WIFINETMASK): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFINetmask: function(var wifiNetmask: WIFINETMASK): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetWIFIGateway: function(var wifiGateway: WIFIGATEWAY): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFIGateway: function(var wifiGateway: WIFIGATEWAY): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetWIFIDNS: function(var wifiDNS: WIFIDNS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFIDNS: function(var wifiDNS: WIFIDNS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetWIFIConnectStatus: function(var isConnected: Bool): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// TEST }
var
  GetUserParams: function(var userParams: USERPARAMS): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetPTPTime: function(var ptpCmd: PTPCMD; 
                       var ptpTime: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{/// Queued command }
var
  SetQueuedCmdStartExec: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetQueuedCmdStopExec: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetQueuedCmdForceStopExec: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetQueuedCmdStartDownload: function(totalLoop: UINT32_T; 
                                      linePerLoop: UINT32_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetQueuedCmdStopDownload: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  SetQueuedCmdClear: function: "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  GetQueuedCmdCurrentIndex: function(var queuedCmdCurrentIndex: UINT64_T): "C" cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{$ENDIF // DOBOTDLL_H}

var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('DOBOTDLL.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @DobotExec := GetProcAddress(DLLHandle,'DobotExec');
  {$IFDEF WIN32}
    Assert(@DobotExec <> nil);
  {$ENDIF}
    @SearchDobot := GetProcAddress(DLLHandle,'SearchDobot');
  {$IFDEF WIN32}
    Assert(@SearchDobot <> nil);
  {$ENDIF}
    @ConnectDobot := GetProcAddress(DLLHandle,'ConnectDobot');
  {$IFDEF WIN32}
    Assert(@ConnectDobot <> nil);
  {$ENDIF}
    @DisconnectDobot := GetProcAddress(DLLHandle,'DisconnectDobot');
  {$IFDEF WIN32}
    Assert(@DisconnectDobot <> nil);
  {$ENDIF}
    @SetCmdTimeout := GetProcAddress(DLLHandle,'SetCmdTimeout');
  {$IFDEF WIN32}
    Assert(@SetCmdTimeout <> nil);
  {$ENDIF}
    @SetDeviceSN := GetProcAddress(DLLHandle,'SetDeviceSN');
  {$IFDEF WIN32}
    Assert(@SetDeviceSN <> nil);
  {$ENDIF}
    @GetDeviceSN := GetProcAddress(DLLHandle,'GetDeviceSN');
  {$IFDEF WIN32}
    Assert(@GetDeviceSN <> nil);
  {$ENDIF}
    @SetDeviceName := GetProcAddress(DLLHandle,'SetDeviceName');
  {$IFDEF WIN32}
    Assert(@SetDeviceName <> nil);
  {$ENDIF}
    @GetDeviceName := GetProcAddress(DLLHandle,'GetDeviceName');
  {$IFDEF WIN32}
    Assert(@GetDeviceName <> nil);
  {$ENDIF}
    @GetDeviceVersion := GetProcAddress(DLLHandle,'GetDeviceVersion');
  {$IFDEF WIN32}
    Assert(@GetDeviceVersion <> nil);
  {$ENDIF}
    @GetPose := GetProcAddress(DLLHandle,'GetPose');
  {$IFDEF WIN32}
    Assert(@GetPose <> nil);
  {$ENDIF}
    @GetPoseEx := GetProcAddress(DLLHandle,'GetPoseEx');
  {$IFDEF WIN32}
    Assert(@GetPoseEx <> nil);
  {$ENDIF}
    @ResetPose := GetProcAddress(DLLHandle,'ResetPose');
  {$IFDEF WIN32}
    Assert(@ResetPose <> nil);
  {$ENDIF}
    @GetKinematics := GetProcAddress(DLLHandle,'GetKinematics');
  {$IFDEF WIN32}
    Assert(@GetKinematics <> nil);
  {$ENDIF}
    @GetAlarmsState := GetProcAddress(DLLHandle,'GetAlarmsState');
  {$IFDEF WIN32}
    Assert(@GetAlarmsState <> nil);
  {$ENDIF}
    @ClearAllAlarmsState := GetProcAddress(DLLHandle,'ClearAllAlarmsState');
  {$IFDEF WIN32}
    Assert(@ClearAllAlarmsState <> nil);
  {$ENDIF}
    @SetHOMEParams := GetProcAddress(DLLHandle,'SetHOMEParams');
  {$IFDEF WIN32}
    Assert(@SetHOMEParams <> nil);
  {$ENDIF}
    @GetHOMEParams := GetProcAddress(DLLHandle,'GetHOMEParams');
  {$IFDEF WIN32}
    Assert(@GetHOMEParams <> nil);
  {$ENDIF}
    @SetHOMECmd := GetProcAddress(DLLHandle,'SetHOMECmd');
  {$IFDEF WIN32}
    Assert(@SetHOMECmd <> nil);
  {$ENDIF}
    @SetHHTTrigMode := GetProcAddress(DLLHandle,'SetHHTTrigMode');
  {$IFDEF WIN32}
    Assert(@SetHHTTrigMode <> nil);
  {$ENDIF}
    @GetHHTTrigMode := GetProcAddress(DLLHandle,'GetHHTTrigMode');
  {$IFDEF WIN32}
    Assert(@GetHHTTrigMode <> nil);
  {$ENDIF}
    @SetHHTTrigOutputEnabled := GetProcAddress(DLLHandle,'SetHHTTrigOutputEnabled');
  {$IFDEF WIN32}
    Assert(@SetHHTTrigOutputEnabled <> nil);
  {$ENDIF}
    @GetHHTTrigOutputEnabled := GetProcAddress(DLLHandle,'GetHHTTrigOutputEnabled');
  {$IFDEF WIN32}
    Assert(@GetHHTTrigOutputEnabled <> nil);
  {$ENDIF}
    @GetHHTTrigOutput := GetProcAddress(DLLHandle,'GetHHTTrigOutput');
  {$IFDEF WIN32}
    Assert(@GetHHTTrigOutput <> nil);
  {$ENDIF}
    @SetEndEffectorParams := GetProcAddress(DLLHandle,'SetEndEffectorParams');
  {$IFDEF WIN32}
    Assert(@SetEndEffectorParams <> nil);
  {$ENDIF}
    @GetEndEffectorParams := GetProcAddress(DLLHandle,'GetEndEffectorParams');
  {$IFDEF WIN32}
    Assert(@GetEndEffectorParams <> nil);
  {$ENDIF}
    @SetEndEffectorLaser := GetProcAddress(DLLHandle,'SetEndEffectorLaser');
  {$IFDEF WIN32}
    Assert(@SetEndEffectorLaser <> nil);
  {$ENDIF}
    @GetEndEffectorLaser := GetProcAddress(DLLHandle,'GetEndEffectorLaser');
  {$IFDEF WIN32}
    Assert(@GetEndEffectorLaser <> nil);
  {$ENDIF}
    @SetEndEffectorSuctionCup := GetProcAddress(DLLHandle,'SetEndEffectorSuctionCup');
  {$IFDEF WIN32}
    Assert(@SetEndEffectorSuctionCup <> nil);
  {$ENDIF}
    @GetEndEffectorSuctionCup := GetProcAddress(DLLHandle,'GetEndEffectorSuctionCup');
  {$IFDEF WIN32}
    Assert(@GetEndEffectorSuctionCup <> nil);
  {$ENDIF}
    @SetEndEffectorGripper := GetProcAddress(DLLHandle,'SetEndEffectorGripper');
  {$IFDEF WIN32}
    Assert(@SetEndEffectorGripper <> nil);
  {$ENDIF}
    @GetEndEffectorGripper := GetProcAddress(DLLHandle,'GetEndEffectorGripper');
  {$IFDEF WIN32}
    Assert(@GetEndEffectorGripper <> nil);
  {$ENDIF}
    @SetArmOrientation := GetProcAddress(DLLHandle,'SetArmOrientation');
  {$IFDEF WIN32}
    Assert(@SetArmOrientation <> nil);
  {$ENDIF}
    @GetArmOrientation := GetProcAddress(DLLHandle,'GetArmOrientation');
  {$IFDEF WIN32}
    Assert(@GetArmOrientation <> nil);
  {$ENDIF}
    @SetJOGJointParams := GetProcAddress(DLLHandle,'SetJOGJointParams');
  {$IFDEF WIN32}
    Assert(@SetJOGJointParams <> nil);
  {$ENDIF}
    @GetJOGJointParams := GetProcAddress(DLLHandle,'GetJOGJointParams');
  {$IFDEF WIN32}
    Assert(@GetJOGJointParams <> nil);
  {$ENDIF}
    @SetJOGCoordinateParams := GetProcAddress(DLLHandle,'SetJOGCoordinateParams');
  {$IFDEF WIN32}
    Assert(@SetJOGCoordinateParams <> nil);
  {$ENDIF}
    @GetJOGCoordinateParams := GetProcAddress(DLLHandle,'GetJOGCoordinateParams');
  {$IFDEF WIN32}
    Assert(@GetJOGCoordinateParams <> nil);
  {$ENDIF}
    @SetJOGCommonParams := GetProcAddress(DLLHandle,'SetJOGCommonParams');
  {$IFDEF WIN32}
    Assert(@SetJOGCommonParams <> nil);
  {$ENDIF}
    @GetJOGCommonParams := GetProcAddress(DLLHandle,'GetJOGCommonParams');
  {$IFDEF WIN32}
    Assert(@GetJOGCommonParams <> nil);
  {$ENDIF}
    @SetJOGCmd := GetProcAddress(DLLHandle,'SetJOGCmd');
  {$IFDEF WIN32}
    Assert(@SetJOGCmd <> nil);
  {$ENDIF}
    @SetPTPJointParams := GetProcAddress(DLLHandle,'SetPTPJointParams');
  {$IFDEF WIN32}
    Assert(@SetPTPJointParams <> nil);
  {$ENDIF}
    @GetPTPJointParams := GetProcAddress(DLLHandle,'GetPTPJointParams');
  {$IFDEF WIN32}
    Assert(@GetPTPJointParams <> nil);
  {$ENDIF}
    @SetPTPCoordinateParams := GetProcAddress(DLLHandle,'SetPTPCoordinateParams');
  {$IFDEF WIN32}
    Assert(@SetPTPCoordinateParams <> nil);
  {$ENDIF}
    @GetPTPCoordinateParams := GetProcAddress(DLLHandle,'GetPTPCoordinateParams');
  {$IFDEF WIN32}
    Assert(@GetPTPCoordinateParams <> nil);
  {$ENDIF}
    @SetPTPJumpParams := GetProcAddress(DLLHandle,'SetPTPJumpParams');
  {$IFDEF WIN32}
    Assert(@SetPTPJumpParams <> nil);
  {$ENDIF}
    @GetPTPJumpParams := GetProcAddress(DLLHandle,'GetPTPJumpParams');
  {$IFDEF WIN32}
    Assert(@GetPTPJumpParams <> nil);
  {$ENDIF}
    @SetPTPCommonParams := GetProcAddress(DLLHandle,'SetPTPCommonParams');
  {$IFDEF WIN32}
    Assert(@SetPTPCommonParams <> nil);
  {$ENDIF}
    @GetPTPCommonParams := GetProcAddress(DLLHandle,'GetPTPCommonParams');
  {$IFDEF WIN32}
    Assert(@GetPTPCommonParams <> nil);
  {$ENDIF}
    @SetPTPCmd := GetProcAddress(DLLHandle,'SetPTPCmd');
  {$IFDEF WIN32}
    Assert(@SetPTPCmd <> nil);
  {$ENDIF}
    @SetCPParams := GetProcAddress(DLLHandle,'SetCPParams');
  {$IFDEF WIN32}
    Assert(@SetCPParams <> nil);
  {$ENDIF}
    @GetCPParams := GetProcAddress(DLLHandle,'GetCPParams');
  {$IFDEF WIN32}
    Assert(@GetCPParams <> nil);
  {$ENDIF}
    @SetCPCmd := GetProcAddress(DLLHandle,'SetCPCmd');
  {$IFDEF WIN32}
    Assert(@SetCPCmd <> nil);
  {$ENDIF}
    @SetCPLECmd := GetProcAddress(DLLHandle,'SetCPLECmd');
  {$IFDEF WIN32}
    Assert(@SetCPLECmd <> nil);
  {$ENDIF}
    @SetARCParams := GetProcAddress(DLLHandle,'SetARCParams');
  {$IFDEF WIN32}
    Assert(@SetARCParams <> nil);
  {$ENDIF}
    @GetARCParams := GetProcAddress(DLLHandle,'GetARCParams');
  {$IFDEF WIN32}
    Assert(@GetARCParams <> nil);
  {$ENDIF}
    @SetARCCmd := GetProcAddress(DLLHandle,'SetARCCmd');
  {$IFDEF WIN32}
    Assert(@SetARCCmd <> nil);
  {$ENDIF}
    @SetWAITCmd := GetProcAddress(DLLHandle,'SetWAITCmd');
  {$IFDEF WIN32}
    Assert(@SetWAITCmd <> nil);
  {$ENDIF}
    @SetTRIGCmd := GetProcAddress(DLLHandle,'SetTRIGCmd');
  {$IFDEF WIN32}
    Assert(@SetTRIGCmd <> nil);
  {$ENDIF}
    @SetIOMultiplexing := GetProcAddress(DLLHandle,'SetIOMultiplexing');
  {$IFDEF WIN32}
    Assert(@SetIOMultiplexing <> nil);
  {$ENDIF}
    @GetIOMultiplexing := GetProcAddress(DLLHandle,'GetIOMultiplexing');
  {$IFDEF WIN32}
    Assert(@GetIOMultiplexing <> nil);
  {$ENDIF}
    @SetIODO := GetProcAddress(DLLHandle,'SetIODO');
  {$IFDEF WIN32}
    Assert(@SetIODO <> nil);
  {$ENDIF}
    @GetIODO := GetProcAddress(DLLHandle,'GetIODO');
  {$IFDEF WIN32}
    Assert(@GetIODO <> nil);
  {$ENDIF}
    @SetIOPWM := GetProcAddress(DLLHandle,'SetIOPWM');
  {$IFDEF WIN32}
    Assert(@SetIOPWM <> nil);
  {$ENDIF}
    @GetIOPWM := GetProcAddress(DLLHandle,'GetIOPWM');
  {$IFDEF WIN32}
    Assert(@GetIOPWM <> nil);
  {$ENDIF}
    @GetIODI := GetProcAddress(DLLHandle,'GetIODI');
  {$IFDEF WIN32}
    Assert(@GetIODI <> nil);
  {$ENDIF}
    @GetIOADC := GetProcAddress(DLLHandle,'GetIOADC');
  {$IFDEF WIN32}
    Assert(@GetIOADC <> nil);
  {$ENDIF}
    @SetEMotor := GetProcAddress(DLLHandle,'SetEMotor');
  {$IFDEF WIN32}
    Assert(@SetEMotor <> nil);
  {$ENDIF}
    @SetAngleSensorStaticError := GetProcAddress(DLLHandle,'SetAngleSensorStaticError');
  {$IFDEF WIN32}
    Assert(@SetAngleSensorStaticError <> nil);
  {$ENDIF}
    @GetAngleSensorStaticError := GetProcAddress(DLLHandle,'GetAngleSensorStaticError');
  {$IFDEF WIN32}
    Assert(@GetAngleSensorStaticError <> nil);
  {$ENDIF}
    @SetAngleSensorCoef := GetProcAddress(DLLHandle,'SetAngleSensorCoef');
  {$IFDEF WIN32}
    Assert(@SetAngleSensorCoef <> nil);
  {$ENDIF}
    @GetAngleSensorCoef := GetProcAddress(DLLHandle,'GetAngleSensorCoef');
  {$IFDEF WIN32}
    Assert(@GetAngleSensorCoef <> nil);
  {$ENDIF}
    @SetBaseDecoderStaticError := GetProcAddress(DLLHandle,'SetBaseDecoderStaticError');
  {$IFDEF WIN32}
    Assert(@SetBaseDecoderStaticError <> nil);
  {$ENDIF}
    @GetBaseDecoderStaticError := GetProcAddress(DLLHandle,'GetBaseDecoderStaticError');
  {$IFDEF WIN32}
    Assert(@GetBaseDecoderStaticError <> nil);
  {$ENDIF}
    @SetWIFIConfigMode := GetProcAddress(DLLHandle,'SetWIFIConfigMode');
  {$IFDEF WIN32}
    Assert(@SetWIFIConfigMode <> nil);
  {$ENDIF}
    @GetWIFIConfigMode := GetProcAddress(DLLHandle,'GetWIFIConfigMode');
  {$IFDEF WIN32}
    Assert(@GetWIFIConfigMode <> nil);
  {$ENDIF}
    @SetWIFISSID := GetProcAddress(DLLHandle,'SetWIFISSID');
  {$IFDEF WIN32}
    Assert(@SetWIFISSID <> nil);
  {$ENDIF}
    @GetWIFISSID := GetProcAddress(DLLHandle,'GetWIFISSID');
  {$IFDEF WIN32}
    Assert(@GetWIFISSID <> nil);
  {$ENDIF}
    @SetWIFIPassword := GetProcAddress(DLLHandle,'SetWIFIPassword');
  {$IFDEF WIN32}
    Assert(@SetWIFIPassword <> nil);
  {$ENDIF}
    @GetWIFIPassword := GetProcAddress(DLLHandle,'GetWIFIPassword');
  {$IFDEF WIN32}
    Assert(@GetWIFIPassword <> nil);
  {$ENDIF}
    @SetWIFIIPAddress := GetProcAddress(DLLHandle,'SetWIFIIPAddress');
  {$IFDEF WIN32}
    Assert(@SetWIFIIPAddress <> nil);
  {$ENDIF}
    @GetWIFIIPAddress := GetProcAddress(DLLHandle,'GetWIFIIPAddress');
  {$IFDEF WIN32}
    Assert(@GetWIFIIPAddress <> nil);
  {$ENDIF}
    @SetWIFINetmask := GetProcAddress(DLLHandle,'SetWIFINetmask');
  {$IFDEF WIN32}
    Assert(@SetWIFINetmask <> nil);
  {$ENDIF}
    @GetWIFINetmask := GetProcAddress(DLLHandle,'GetWIFINetmask');
  {$IFDEF WIN32}
    Assert(@GetWIFINetmask <> nil);
  {$ENDIF}
    @SetWIFIGateway := GetProcAddress(DLLHandle,'SetWIFIGateway');
  {$IFDEF WIN32}
    Assert(@SetWIFIGateway <> nil);
  {$ENDIF}
    @GetWIFIGateway := GetProcAddress(DLLHandle,'GetWIFIGateway');
  {$IFDEF WIN32}
    Assert(@GetWIFIGateway <> nil);
  {$ENDIF}
    @SetWIFIDNS := GetProcAddress(DLLHandle,'SetWIFIDNS');
  {$IFDEF WIN32}
    Assert(@SetWIFIDNS <> nil);
  {$ENDIF}
    @GetWIFIDNS := GetProcAddress(DLLHandle,'GetWIFIDNS');
  {$IFDEF WIN32}
    Assert(@GetWIFIDNS <> nil);
  {$ENDIF}
    @GetWIFIConnectStatus := GetProcAddress(DLLHandle,'GetWIFIConnectStatus');
  {$IFDEF WIN32}
    Assert(@GetWIFIConnectStatus <> nil);
  {$ENDIF}
    @GetUserParams := GetProcAddress(DLLHandle,'GetUserParams');
  {$IFDEF WIN32}
    Assert(@GetUserParams <> nil);
  {$ENDIF}
    @GetPTPTime := GetProcAddress(DLLHandle,'GetPTPTime');
  {$IFDEF WIN32}
    Assert(@GetPTPTime <> nil);
  {$ENDIF}
    @SetQueuedCmdStartExec := GetProcAddress(DLLHandle,'SetQueuedCmdStartExec');
  {$IFDEF WIN32}
    Assert(@SetQueuedCmdStartExec <> nil);
  {$ENDIF}
    @SetQueuedCmdStopExec := GetProcAddress(DLLHandle,'SetQueuedCmdStopExec');
  {$IFDEF WIN32}
    Assert(@SetQueuedCmdStopExec <> nil);
  {$ENDIF}
    @SetQueuedCmdForceStopExec := GetProcAddress(DLLHandle,'SetQueuedCmdForceStopExec');
  {$IFDEF WIN32}
    Assert(@SetQueuedCmdForceStopExec <> nil);
  {$ENDIF}
    @SetQueuedCmdStartDownload := GetProcAddress(DLLHandle,'SetQueuedCmdStartDownload');
  {$IFDEF WIN32}
    Assert(@SetQueuedCmdStartDownload <> nil);
  {$ENDIF}
    @SetQueuedCmdStopDownload := GetProcAddress(DLLHandle,'SetQueuedCmdStopDownload');
  {$IFDEF WIN32}
    Assert(@SetQueuedCmdStopDownload <> nil);
  {$ENDIF}
    @SetQueuedCmdClear := GetProcAddress(DLLHandle,'SetQueuedCmdClear');
  {$IFDEF WIN32}
    Assert(@SetQueuedCmdClear <> nil);
  {$ENDIF}
    @GetQueuedCmdCurrentIndex := GetProcAddress(DLLHandle,'GetQueuedCmdCurrentIndex');
  {$IFDEF WIN32}
    Assert(@GetQueuedCmdCurrentIndex <> nil);
  {$ENDIF}
  end
  else
  begin
    DLLLoaded := False;
    { Error: DOBOTDLL.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
